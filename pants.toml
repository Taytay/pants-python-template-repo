# Copyright 2020 Pants project contributors.
# Licensed under the Apache License, Version 2.0 (see LICENSE).

[GLOBAL]
pants_version = "2.20.0"
backend_packages.add = [
  "pants.backend.python",
  # If you uncomment the pyenv backend, it auto-installs the correct python version for us. However, that is pretty slow (like 2-3 minutes to install python). Also, it installs unoptimized python by default
  # "pants.backend.python.providers.experimental.pyenv",
  "pants.backend.docker",
  "pants.backend.python.mixed_interpreter_constraints",
  "pants.backend.python.typecheck.mypy",
  "pants.backend.experimental.python.lint.ruff.check",
  "pants.backend.experimental.python.lint.ruff.format",
  "pants.backend.experimental.visibility",
  "pants.backend.shell",
  "pants.backend.shell.lint.shellcheck",
  "pants.backend.shell.lint.shfmt"
]

pants_ignore = [
    ".*/",
    "/dist/",
    "__pycache__",
    "*.log"
]

[anonymous-telemetry]
enabled = false

[cli.alias]
--all-changed = "--changed-since=HEAD --changed-dependents=transitive"

[python-infer]
assets = true
unowned_dependency_behavior = "error"

[source]
# We make our root src/python
root_patterns = ["/src/python", "/tests/python", "/3rdparty"]

[python]
# The default interpreter constraints for code in this repo. Individual targets can override
#  this with the `interpreter_constraints` field. See
#  https://www.pantsbuild.org/docs/python-interpreter-compatibility.

# After changing the version of python or pip: 
# 0: Ensure it's installed.
# 1: Run: `./scripts/pants-refresh-after-python-update.sh`
# 2: Then, grep through the whole repo for the old value, and change it to this new value
# For example, if you change from 3.10.10 to 3.10.14, you'll need to change it in the src/docker/math_fun/cli/Dockerfile as well because you need to change the base image to match.
# If you see 3.10.10 in a pants lockfile, ignore it. You just need to regenerate that lockfile. (You did do step #1 right?!?)
# (Yes, there is probably a better way to keep all of these versions the same! I just don't know it yet...)
# lighting studios uses 3.10.10, so that's what we use here
interpreter_constraints = ["CPython==3.10.*"]
pip_version = "24.0"

# Enable the "resolves" mechanism, which turns on lockfiles for user code. See
# https://www.pantsbuild.org/docs/python-third-party-dependencies. This also adds the
# `generate-lockfiles` goal for Pants to generate the lockfile for you.
enable_resolves = true

[python-bootstrap]
# We search for interpreters both on the $PATH and in the `$(pyenv root)/versions` folder.
#  If you're using macOS, you may want to leave off the <PATH> entry to avoid using the
#  problematic system Pythons. See
#  https://www.pantsbuild.org/docs/python-interpreter-compatibility#changing-the-interpreter-search-path.
search_path = ["<PATH>", "<PYENV>"]

[coverage-py]
report = [
    "console",
    "xml",
    "html",
]

[python.resolves]
# Run `pants generate-lockfiles` to generate these lockfiles
python-default = "python-default.lock"
black = "3rdparty/python/black.lock"
ruff = "3rdparty/python/ruff.lock"
pytest = "3rdparty/python/pytest.lock"
coverage-py = "3rdparty/python/coverage-py.lock"
mypy = "3rdparty/python/mypy.lock"

[shellcheck]
args = ["--external-sources"]

[shfmt]
# See https://github.com/mvdan/sh/blob/master/cmd/shfmt/shfmt.1.scd#printer-flags.
args = ["-i 2", "-ci", "-sr"]

[pytest]
args = ["-vv"] #"--no-header", 
execution_slot_var = "TEST_EXECUTION_SLOT"
install_from_resolve = "pytest"

